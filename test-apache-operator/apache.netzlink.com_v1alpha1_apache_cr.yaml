apiVersion: apache.netzlink.com/v1alpha1
kind: Apache
metadata:
  name: example-apache
spec:
  # Default values copied from <project_dir>/helm-charts/apache/values.yaml
  
  affinity: {}
  args: []
  autoscaling:
    enabled: false
    maxReplicas: 11
    minReplicas: 1
    targetCPU: 50
    targetMemory: 50
  cloneHtdocsFromGit:
    branch: ""
    enableAutoRefresh: true
    enabled: false
    extraVolumeMounts: []
    interval: 60
    repository: ""
    resources: {}
  command: []
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    http: 8080
    https: 8443
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraPodSpec: {}
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  git:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/git
    tag: 2.35.1-debian-10-r46
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases:
  - hostnames:
    - status.localhost
    ip: 127.0.0.1
  htdocsConfigMap: ""
  htdocsPVC: ""
  httpdConfConfigMap: ""
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/apache
    tag: 2.4.53-debian-10-r2
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraPaths: []
    extraTls: []
    hostname: example.local
    hosts: []
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    tls:
    - hosts:
      - example.local
      secretName: example.local-tls
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 180
    path: /
    periodSeconds: 20
    port: http
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    enabled: false
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/apache-exporter
      tag: 0.11.0-debian-10-r86
    podAnnotations:
      prometheus.io/port: "9117"
      prometheus.io/scrape: "true"
    prometheusRule:
      enabled: false
      labels: {}
      namespace: ""
      rules: []
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.port }}'
        prometheus.io/scrape: "true"
      port: 9117
    serviceMonitor:
      enabled: false
      interval: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
  nameOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    path: /
    periodSeconds: 10
    port: http
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      http: ""
      https: ""
    ports:
      http: 80
      https: 443
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: LoadBalancer
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 6
    initialDelaySeconds: 180
    path: /
    periodSeconds: 20
    port: http
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
  vhostsConfigMap: ""
  
